server:
  port: @mall-order-sharding.port@
spring:
  shardingsphere:
    datasource:
      names: ds1,ds0
      ds1:
        #配置数据源
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://@database.addr@/myMall?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: hujian
        password: hujian
        #初始化连接池大小
        initial-size: 5
        #最小连接数量
        min-idle: 5
        #最大连接数量
        max-active: 300
        #最大等待时间
        max-wait: 5000
        #用来检测连接是否有效的sql 必须是一个查询语句
        #mssql中为 select 1
        #mysql中为 select 'x'
        #申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
        test-on-borrow: false
        #归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
        test-on-return: false
      ds0:
        #配置数据源
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://@database.addr@/myMall2?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: hujian
        password: hujian
        #初始化连接池大小
        initial-size: 5
        #最小连接数量
        min-idle: 5
        #最大连接数量
        max-active: 300
        #最大等待时间
        max-wait: 5000
        #用来检测连接是否有效的sql 必须是一个查询语句
        #mssql中为 select 1
        #mysql中为 select 'x'
        #申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
        test-on-borrow: false
        #归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
        test-on-return: false
    rules:
      sharding:
        tables:
          # 逻辑表名称
          ums_member:
            # 行表达式标识符可以使用 ${...} 或 $->{...}，但前者与 Spring 本身的属性文件占位符冲突，因此在 Spring 环境中使用行表达式标识符建议使用 $->{...}
            actual-data-nodes: ds$->{0..1}.ums_member_$->{0..1}
            #分库策略
            database-strategy:
              standard:
                # 分片列名称
                sharding-column: id
                # 分片算法名称，与下方配置对应
                sharding-algorithm-name: member-ds-inline
            #分表策略
            table-strategy:
              standard:
                # 分片列名称
                sharding-column: id
                # 分片算法名称，与下方配置对应
                sharding-algorithm-name: member-table-inline
            # 表主键算法
            key-generate-strategy:
              column: id
              key-generator-name: snowflake
        # 分布式序列算法配置
        key-generators:
          snowflake:
            # 分布式序列算法（雪花算法：SNOWFLAKE； UUID：UUID）
            type: SNOWFLAKE
            # 分布式序列算法属性配置
            props:
              # 工作机器唯一标识
              worker-id: 001
        sharding-algorithms:
          member-table-inline:
            type: COMPLEX
            props:
#              #分片算法的行表达式
#              algorithm-expression: ums_member_$->{id % 2}
               algorithm-class-name: com.hujian.mall.order.sharding.algorithm.MyComplexAlgorithm
          member-ds-inline:
            type: INLINE
            props:
              #分片算法的行表达式
              algorithm-expression: ds$->{id % 2}
    props:
      # 日志显示具体的SQL
      sql-show: true
#spring:
##  datasource:
##    url: jdbc:mysql://@database.addr@/myMall?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
##    username: hujian
##    password: hujian
##    #阿里连接池配置
##    druid:
##      #连接池初始化大小
##      initial-size: 5
##      #默认最小空闲数
##      min-idle: 5
##      #最大连接数
##      max-active: 20
##      web-stat-filter:
##        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*" #不统计这些请求数据
##      stat-view-servlet: #访问监控网页的登录用户名和密码
##        login-username: druid
##        login-password: druid
##  redis:
##    host: @redis.ip@ # Redis服务器地址
##    database: 0 # Redis数据库索引（默认为0）
##    port: 6379 # Redis服务器连接端口
##    password: root # Redis服务器连接密码（默认为空）
##    jedis:
##      pool:
##        max-active: 8 # 连接池最大连接数（使用负值表示没有限制）
##        max-wait: -1ms # 连接池最大阻塞等待时间（使用负值表示没有限制）
##        max-idle: 8 # 连接池中的最大空闲连接
##        min-idle: 0 # 连接池中的最小空闲连接
##    timeout: 3000ms # 连接超时时间（毫秒）
#  #配置中心滚环境隔离
#  profiles:
#    active: @activeProfile@
##  mvc:
##    pathmatch:
##      matching-strategy: ant_path_matcher
#  cloud:
#    #dataid = ${prefix}-${spring.profiles.active}.${file-extension}
#    #所以此处为 product-center-dev.properties
#    nacos:
##      discovery:
##        server-addr: @nacos.addr@
#        #命名空间，需要创建，默认可为public   namespace id为空
##        namespace: 8cb4a832-1d3f-4cc8-ac52-e0d611a2b9ca
##        group: MALL_GROUP
##        cluster-name: WH
#        #metadata:
#          #version: v1
#      config:
#        server-addr: @nacos.addr@
#        file-extension: yml
#        shared-configs:
#          - data-id: mall-common.yml
#            group: MALL_GROUP
#  #        shared-configs[1]:
##          data-id: mall-common.yml
##          group: MALL_GROUP
##          refresh: true
##        group: MALL_GROUP
#  #        namespace: 8cb4a832-1d3f-4cc8-ac52-e0d611a2b9ca
#  application:
#    name: mall-member
#  config:
#    # 因为springboot 2.4版本以后默认关闭加载bootstrap.yml，所以只能通过此方式连接到nacos config
#    import: nacos:${spring.application.name}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension}
#server:
#  port: @mall-member.port@
#mybatis-plus:
#  mapper-locations:
#    - classpath:mapper/*.xml